<!DOCTYPE html>
<html>
<head>
  <title>My Library -- xboxfocus.github.io</title>
  <style>
        .container {
          display: flex;
          flex-wrap: wrap;
          justify-content: center;
          align-items: center;
          text-align: center;
          white-space: pre-wrap;
        }
        .entry {
          text-align: center;
          margin: 10px;
          cursor: pointer;
          max-width: 200px;
          min-height: 380px;
          white-space: pre-wrap;
        }
        .entry img {
		  max-width: 177px;
          min-width: 177px;
          height: 100%;
		  min-height: 265px;
		  max-height: 265px;
        }
        .entry tid {
          text-align: center;
          margin: 10px;
          width: 80%;
          height: 100%;
          white-space: pre-wrap;
        }
        .entry titl {
          text-align: center;
          margin: 10px;
          width: 80%;
          height: 100%;
          white-space: pre-wrap;
        }

  </style>
</head>
<body>
  <div style="text-align: center;">
    <h2>My Library -- xboxfocus.github.io</h2>
	<br>
    <button id="openFileButton">Open File</button>
    <pre id="fileContent"></pre>
	</div>
  <hr>
  <br>
  <div class="container" id="entries"></div>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const openFileButton = document.getElementById('openFileButton');

            openFileButton.addEventListener('click', async () => {
                try {
                    const file = await selectFile();
                    if (file) {
						
						const entries = document.getElementById('entries');
						const footer = document.getElementById('footer');
						const container = document.createElement('div');
						
						container.textContent = '';
						container.innerHTML = '';
						entries.textContent = '';
						entries.innerHTML = '';
						footer.textContent = '';
						footer.innerHTML = '';
					
                        const fileContent = await readFileAsText(file);
                        const lines = fileContent.split('\n'); // Divide by newline
                        
						let urlParams = new URLSearchParams(window.location.search);
						let page = urlParams.get('page');
						if (page == null) 
						{
							page = "0";
						}
						let data = lines;
						let max_in_page = data.length + 1;
						data.sort((a, b) => a.split("|")[0].localeCompare(b.split("|")[0]));
						for (let i = 0; i < max_in_page; i++) 
						{
							let it = ((parseInt(page)) * max_in_page) + i;
							if (it < data.length) 
							{
								const entryData = data[it].split("|");
								if (entryData.length === 5) 
								{
									const entry = document.createElement("div");
									entry.className = "entry";
									entry.onclick = function() 
									{
										window.open("xfxbgapp://" + entryData[3] + "^" + entryData[4]);
									};
										
									const img = document.createElement("img");
									img.src = entryData[2] + "?q=90&w=177&h=265";
									const name = document.createElement("tid");
									name.textContent = entryData[1] + '\n';
									const titleId = document.createElement("titl");
									titleId.innerHTML = "<b>" + entryData[0] + "<\/b>";
									entry.appendChild(img);
									entry.appendChild(name);
									entry.appendChild(titleId);
									entries.appendChild(entry);
								}
							}
						}
						const button = document.createElement('button');
						const back_button = document.createElement('button');
						container.style.display = 'wrap';
						container.style.justifyContent = 'space-evenly';
						container.style.alignItems = 'center';
						container.style.textAlign = 'center';
						let has_first_button = (parseInt(page)) > 0;
						let has_second_button = data.length > (max_in_page*((parseInt(page)) + 1));
						if (has_first_button || has_second_button)
						{
							const heading = document.createElement('h3');
							heading.textContent = 'Buttons';
							container.appendChild(heading);
							const lineBreak = document.createElement('br');
							container.appendChild(lineBreak);
						}
						if (has_first_button) 
						{
							// TODO:
							// I don't know why, but if the text of the buttons
							// has different length, then the buttons won't
							// be perfectly centered
							back_button.innerHTML = '<-- Page';
							back_button.onclick = function() 
							{
								const newUrl = window.location.href.split('?')[0] + '?page=' + ((parseInt(urlParams.get('page')) || 0) - 1);
								window.location.href = newUrl;
							};
							container.appendChild(back_button)
						}
					
						if (has_second_button) 
						{
							if(has_first_button) 
							{
								for(let k = 0; k < 6; k++)
								{
									container.appendChild(document.createTextNode('\u00A0'));
								}
							}
						
							// TODO:
							// I don't know why, but if the text of the buttons
							// has different length, then the buttons won't
							// be perfectly centered
							button.innerHTML = '--> Page';
							button.onclick = function() 
							{
								const newUrl = window.location.href.split('?')[0] + '?page=' + ((parseInt(urlParams.get('page')) || 0)  + 1);
								window.location.href = newUrl;
							};
							container.appendChild(button);
						}
						footer.appendChild(container);
                    }
                } catch (error) {
                    console.error('Error reading file:', error);
                }
            });
        });

        async function selectFile() {
            return new Promise((resolve, reject) => {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = '.txt';
                input.addEventListener('change', (event) => {
                    const selectedFile = event.target.files[0];
                    resolve(selectedFile);
                });
                input.click();
            });
        }

        async function readFileAsText(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = (event) => {
                    resolve(event.target.result);
                };
                reader.onerror = (error) => {
                    reject(error);
                };
                reader.readAsText(file);
            });
        }
  </script><br>
  <hr>
  <br>
  <footer id="footer"></footer>
</body>
</html>
